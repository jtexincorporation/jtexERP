using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using System.IO;
using System.Diagnostics;
using System.Net;
using Modelx;
using DevExpress.XtraEditors;


namespace JTex.Forms.ArTMS
{
    public partial class ArticlesForm : Form
    {
        public ArticlesForm()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            Modelx.ATMSEntityModel dbContext = new Modelx.ATMSEntityModel();
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.Articles.Load();
            // This line of code is generated by Data Source Configuration Wizard
            articlesBindingSource.DataSource = dbContext.Articles.Local.ToBindingList();
            // This line of code is generated by Data Source Configuration Wizard
            
             dbContext = new Modelx.ATMSEntityModel();
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.Brands.Load();
            // This line of code is generated by Data Source Configuration Wizard
            brandsBindingSource.DataSource = dbContext.Brands.Local.ToBindingList();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            dbContext = new Modelx.ATMSEntityModel();
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.Colors.Load();
            // This line of code is generated by Data Source Configuration Wizard
            colorsBindingSource.DataSource = dbContext.Colors.Local.ToBindingList();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            dbContext = new Modelx.ATMSEntityModel();
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.Currencies.Load();
            // This line of code is generated by Data Source Configuration Wizard
            currenciesBindingSource.DataSource = dbContext.Currencies.Local.ToBindingList();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext

            dbContext = new Modelx.ATMSEntityModel();
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.Genders.Load();
            // This line of code is generated by Data Source Configuration Wizard
            gendersBindingSource.DataSource = dbContext.Genders.Local.ToBindingList();
            //dbContext = new Modelx.ATMSEntityModel();
            //dbContext.ArticleBarcodes.Load();
            //articleBarcodesBindingSource.DataSource = dbContext.ArticleBarcodes.Local.ToBindingList();
            dbContext = new Modelx.ATMSEntityModel();
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.Files.Load();
            // This line of code is generated by Data Source Configuration Wizard
            filesBindingSource.DataSource = dbContext.Files.Local.ToBindingList();

            //DbContext = new Modelx.ATMSEntityModel();
            //DbContext.Sizes.Load();
            //repositoryItemGridLookUpEdit1.DataSource = DbContext.Sizes.Local.ToBindingList();
            //repositoryItemGridLookUpEdit1.ValueMember = "sizeid";
            //repositoryItemGridLookUpEdit1.DisplayMember= "Name";
        }

        ATMSEntityModel DbContext = new ATMSEntityModel();
        Modelx.Article artObj = new Modelx.Article();
        Modelx.ArticleBarcode artbObj = new Modelx.ArticleBarcode();
        int ArticleMaxOne;
        Modelx.File fObj = new Modelx.File();
        string FileName;
        string FolderPath;
        string DestinationPath;

        #region Methods
        private bool CreateArticle()
        {
            bool isSuccess = false;
            ArticleMaxOne = GetMaxOne();
            try
            {

                using (var myDbEntities = new Modelx.ATMSEntityModel())
                {
                    myDbEntities.Articles.Load();
                    var ninjas = myDbEntities.Database.ExecuteSqlCommand("EXEC spSaveArticle {0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12}",
                    Convert.ToInt32(ArticleIDTextEdit.Text.Trim()),
                    StyleNumberTextEdit.Text.Trim(),
                    PriceByTextEdit.Text.Trim(),
                    NameTextEdit.Text.Trim(),
                    Convert.ToInt16(GenderTextEdit.EditValue),
                    Convert.ToInt16(ColorTextEdit.EditValue),
                    CompTextEdit.Text.Trim(),
                    float.Parse(WeightTextEdit.Text.Trim()),
                    Decimal.Parse(PriceTextEdit.Text.Trim()),
                    Convert.ToInt16(CurrencyTextEdit.EditValue),
                    FileName,
                    Convert.ToBoolean(isActiveCheckEdit.EditValue),
                    Convert.ToInt16(BrandTextEdit.EditValue));
                    if (ninjas > 0)
                    {
                        MessageBox.Show("Inserted successfuly....");
                        isSuccess = true;
                    }
                    else
                    {
                        MessageBox.Show("Failed to insert....");
                        isSuccess = false;
                    }
                }
              
            }
            catch(Exception ex)
            {
                MessageBox.Show(""+ex);
            }
            return isSuccess;
        }
        private int GetMaxOne()
        {
            DbContext = new ATMSEntityModel();
            int ArticlID = DbContext.Articles.Max(age => age.ArticleID);
            ArticlID++;
            return ArticlID;
        }
        private void Search(int ArticleID)
        {
            DbContext = new ATMSEntityModel();
            try
            {
                var Article = DbContext.Articles.Find(ArticleID);

                StyleNumberTextEdit.Text = Article.StyleNumber.Trim();

                PriceByTextEdit.Text = Article.PriceBy;

                NameTextEdit.Text = Article.Name.ToString().Trim();

                GenderTextEdit.EditValue = Article.Gender;

                GenderTextEdit.EditValue = Article.Gender;

                ColorTextEdit.EditValue = Article.Color;

                CompTextEdit.Text = Article.Comp;

                WeightTextEdit.Text = Article.Weight.ToString().Trim();

                PriceTextEdit.Text = Article.Price.ToString().Trim();

                CurrencyTextEdit.EditValue = Article.Currency;

                FileName = Article.PicturePath;

                isActiveCheckEdit.EditValue = Article.isActive;

                BrandTextEdit.EditValue = Article.Brand;

                PicturePathTextEdit.Text = Article.PicturePath;

                GetPicture();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Please enter valid id...");
            }

        }
        private void SearchArticleBarcode(int ArticleID)
        {
            DbContext = new ATMSEntityModel();
            try
            {
                var Article = DbContext.ArticleBarcodes.SqlQuery("SELECT * FROM ArticleBarcode WHERE Articleid='" + ArticleID + "'").ToList();
                gridControl1.DataSource = Article;
            }
            catch (Exception ex)
            {

            }
        }
        private void GetPicture()
        {
            try
            {
                string fName = PicturePathTextEdit.Text.Trim();
                string folder = @"\\Acc-stock\jtex\PO Files Data\Article Pictures\";
                string PathString = System.IO.Path.Combine(folder, fName);
                pictureEdit1.Image = Image.FromFile(PathString);
            }
            catch (Exception ex)
            {
                //MessageBox.Show(""+ex.Message);
            }
        }
        private void GetArticleDesignsheet(int ArticleID, int GridIndex, string FileType)
        {
            DbContext = new ATMSEntityModel();
            try
            {
                var File = DbContext.Files.SqlQuery("SELECT * FROM Files WHERE ArticleID='" + ArticleID + "' AND FileType='" + FileType + "'").ToList();
                if (GridIndex == 2)
                {
                    gridControl2.DataSource = File;
                }
                else if (GridIndex == 3)
                {
                    gridControl3.DataSource = File;
                }
                else if (GridIndex == 4)
                {
                    gridControl4.DataSource = File;
                }
                else if (GridIndex == 5)
                {
                    gridControl5.DataSource = File;
                }
                else if (GridIndex == 6)
                {
                    gridControl6.DataSource = File;
                }
            }
            catch (Exception ex)
            {

            }
        }
        private void DeleteArticleBarcode(int ArticleID, byte sizeID, Int16 qty, string Barcode)
        {
            using (var myDbEntities = new Modelx.ATMSEntityModel())
            {
                myDbEntities.ArticleBarcodes.Load();
                var ninjas = myDbEntities.Database.ExecuteSqlCommand("EXEC spDeleteArticleBarcod  {0},{1},{2},{3}",
                ArticleID, sizeID, qty, Barcode);
                if (ninjas > 0)
                {
                    MessageBox.Show("Deleted successfuly....");
                }
                else
                {
                    MessageBox.Show("Failed to delete...");
                }
            }
        }
        private void SaveImageInNetwork()
        {
            
            try
            {
                string folder = @"\\Acc-stock\jtex\PO Files Data\Article Pictures";
                string PathString = System.IO.Path.Combine(folder, FileName);
                Image a = pictureEdit1.Image;
                a.Save(PathString);
            }
            catch(Exception ex)
            {

            }
        }
        private void DeleteFile(long id)
        {
            using (var myDbEntities = new Modelx.ATMSEntityModel())
            {
                myDbEntities.Files.Load();
                var ninjas = myDbEntities.Database.ExecuteSqlCommand("EXEC spDeleteFile {0}", id);
                if (ninjas > 0)
                {
                    MessageBox.Show("Deleted successfuly....");
                }
                else
                {
                    MessageBox.Show("Failed to delete...");
                }
            }
        }
        private string BrowseFile()
        {
            OpenFileDialog openFileDialog1 = new OpenFileDialog
            {
                Title = "Browse Text Files",
                Filter = "All files (*.*)|*.*|txt files (*.txt)|*.txt"
            };
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                FolderPath = openFileDialog1.FileName.ToString().Trim();
                FileName = Path.GetFileName(openFileDialog1.FileName.ToString().Trim());

            }
            return FolderPath;
        }
        private void SaveArticleBarcode()
        {
            int RowCount = gridView1.RowCount;
            for (int i = 0; i < RowCount; i++)
            {

                artbObj.id = 10;
                artbObj.articleid = Convert.ToInt32(ArticleIDTextEdit.Text.Trim());
                artbObj.sizeid = Convert.ToByte(gridView1.GetRowCellValue(i, "sizeid").ToString());
                artbObj.qty = Convert.ToInt16(gridView1.GetRowCellValue(i, "qty").ToString());
                if(gridView1.GetRowCellValue(i, "barcode") == null)
                {
                    artbObj.barcode = "";
                }
                else
                {
                    artbObj.barcode = gridView1.GetRowCellValue(i, "barcode").ToString().Trim();
                }

                using (var myDbEntities = new ATMSEntityModel())
                {
                    myDbEntities.ArticleBarcodes.Add(artbObj);
                    myDbEntities.SaveChanges();
                }
            }
        }
        private bool CheckExistMethod(string StyleNumber)
        {
            bool Success = false;
            using (var DbContext = new ATMSEntityModel())
            {
                var chekin = DbContext.Articles.Where(x => x.StyleNumber == StyleNumber).ToList();
                var qu = from p in chekin select p;
                int n = chekin.Count();
                if (n > 0)
                {
                    Success = false;
                }
                else
                {
                    Success = true;
                }
            }
            return Success;
        }
        private void SaveFile(int ArticleID, string FileName, string SourcePath, string DestinationPath, string FileType,int GridIndex)
        {
            using (var myDbEntities = new Modelx.ATMSEntityModel())
            {
                myDbEntities.Files.Load();
                var ninjas = myDbEntities.Database.ExecuteSqlCommand("EXEC spSaveFile {0},{1},{2},{3},{4}",
                    ArticleID, FileName, SourcePath, DestinationPath, FileType);
                if (ninjas > 0)
                {
                    MessageBox.Show("Inserted successfuly....");
                    GetArticleDesignsheet(ArticleID, GridIndex, FileType);

                }
                else
                {
                    MessageBox.Show("Failed to delete...");
                }
            }

        }
        private bool UpdateArticle()
        {
            bool isSuccess = false;
            ArticleMaxOne = GetMaxOne();
            try
            {

                using (var myDbEntities = new Modelx.ATMSEntityModel())
                {
                    myDbEntities.Articles.Load();
                    var ninjas = myDbEntities.Database.ExecuteSqlCommand("EXEC spUpdateArticleFahid {0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12}",
                    Convert.ToInt32(ArticleIDTextEdit.Text.Trim()),
                    StyleNumberTextEdit.Text.Trim(),
                    PriceByTextEdit.Text.Trim(),
                    NameTextEdit.Text.Trim(),
                    Convert.ToInt16(GenderTextEdit.EditValue),
                    Convert.ToInt16(ColorTextEdit.EditValue),
                    CompTextEdit.Text.Trim(),
                    float.Parse(WeightTextEdit.Text.Trim()),
                    Decimal.Parse(PriceTextEdit.Text.Trim()),
                    Convert.ToInt16(CurrencyTextEdit.EditValue),
                    FileName,
                    Convert.ToBoolean(isActiveCheckEdit.EditValue),
                    Convert.ToInt16(BrandTextEdit.EditValue));
                    if (ninjas > 0)
                    {
                        MessageBox.Show("Updated successfuly....");
                        isSuccess = true;
                    }
                    else
                    {
                        MessageBox.Show("Failed to update....");
                        isSuccess = false;
                    }
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show("" + ex);
            }
            return isSuccess;
        }
        #endregion

        #region DisplayLookUp
        private void Brands()
        {
            Modelx.ATMSEntityModel dbContext = new Modelx.ATMSEntityModel();
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.Brands.Load();
            // This line of code is generated by Data Source Configuration Wizard
            brandsBindingSource.DataSource = dbContext.Brands.Local.ToBindingList();
        }
        private void Gender()
        {
           Modelx.ATMSEntityModel dbContext = new Modelx.ATMSEntityModel();
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.Genders.Load();
            // This line of code is generated by Data Source Configuration Wizard
            gendersBindingSource.DataSource = dbContext.Genders.Local.ToBindingList();
        }
        private void Color()
        {
           Modelx.ATMSEntityModel dbContext = new Modelx.ATMSEntityModel();
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.Colors.Load();
            // This line of code is generated by Data Source Configuration Wizard
            colorsBindingSource.DataSource = dbContext.Colors.Local.ToBindingList();
        }
        private void Currency()
        {
           Modelx.ATMSEntityModel dbContext = new Modelx.ATMSEntityModel();
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.Currencies.Load();
            // This line of code is generated by Data Source Configuration Wizard
            currenciesBindingSource.DataSource = dbContext.Currencies.Local.ToBindingList();
        }
        private void ItemGridLookUp()
        {
            ATMSEntityModel dbContext = new Modelx.ATMSEntityModel();
            dbContext.Sizes.Load();
            repositoryItemGridLookUpEdit1.DataSource = dbContext.Sizes.Local.ToBindingList();
            repositoryItemGridLookUpEdit1.DisplayMember = "Name";
            repositoryItemGridLookUpEdit1.ValueMember = "SizeID";
        }
        #endregion
    
        private void ArticlesForm_Load(object sender, EventArgs e)
        {
            //ArticleIDTextEdit.Text = GetMaxOne().ToString().Trim();
            ArticleIDTextEdit.Text= GetMaxOne().ToString().Trim();
            if (PPOverViewAll.FindSomething==true)
            {
                // Call here method of opening
                Search(PPOverViewAll.ArticleID);
                ClearALLGrids();
                SearchArticleBarcode(PPOverViewAll.ArticleID);                
                GetArticleDesignsheet(PPOverViewAll.ArticleID, 2, "Design Sheets");
                GetArticleDesignsheet(PPOverViewAll.ArticleID, 3, "Barcode Sheets");
                GetArticleDesignsheet(PPOverViewAll.ArticleID, 4, "Comments Sheets");
                GetArticleDesignsheet(PPOverViewAll.ArticleID, 5, "Size Chart Sheets");
                GetArticleDesignsheet(PPOverViewAll.ArticleID, 6, "Consumption Sheets");
            }
            else
            {
                GetMaxOne();
                ItemGridLookUp();
            }
        }
        
        private void barButtonItem1_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            this.Close();
        }
        private void bbiPrintPreview_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            //MessageBox.Show(PPOverViewAll.ArticleID.ToString());
            if (PPOverViewAll.ArticleID.ToString()=="0")
            {
               
                MessageBox.Show("Please copy style# from PP Overview All...");
            }
            else
            {
                ArticleIDTextEdit.Text = PPOverViewAll.ArticleID.ToString().Trim();
                Search(PPOverViewAll.ArticleID);
                ClearALLGrids();
                SearchArticleBarcode(PPOverViewAll.ArticleID);
                GetArticleDesignsheet(PPOverViewAll.ArticleID, 2, "Design Sheets");
                GetArticleDesignsheet(PPOverViewAll.ArticleID, 3, "Barcode Sheets");
                GetArticleDesignsheet(PPOverViewAll.ArticleID, 4, "Comments Sheets");
                GetArticleDesignsheet(PPOverViewAll.ArticleID, 5, "Size Chart Sheets");
                GetArticleDesignsheet(PPOverViewAll.ArticleID, 6, "Consumption Sheets");
            }
        }
        private void ClearALLGrids()
        {
            gridControl1.DataSource = null;
            gridControl2.DataSource = null;
            gridControl3.DataSource = null;
            gridControl4.DataSource = null;
            gridControl5.DataSource = null;
            gridControl6.DataSource = null;
        }
        private void ArticleIDTextEdit_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {             
                Search(Convert.ToInt32(ArticleIDTextEdit.Text.Trim()));
                ClearALLGrids();
                //gridControl1.DataSource = null;
                SearchArticleBarcode(Convert.ToInt32(ArticleIDTextEdit.Text));
                //gridControl2.DataSource = null;
                GetArticleDesignsheet(Convert.ToInt32(ArticleIDTextEdit.Text.Trim()), 2, "Design Sheets");
                //gridControl3.DataSource = null;
                GetArticleDesignsheet(Convert.ToInt32(ArticleIDTextEdit.Text.Trim()), 3, "Barcode Sheets");
                //gridControl4.DataSource = null;
                GetArticleDesignsheet(Convert.ToInt32(ArticleIDTextEdit.Text.Trim()), 4, "Comments Sheets");
                //gridControl5.DataSource = null;
                GetArticleDesignsheet(Convert.ToInt32(ArticleIDTextEdit.Text.Trim()), 5, "Size Chart Sheets");
                //gridControl6.DataSource = null;
                GetArticleDesignsheet(Convert.ToInt32(ArticleIDTextEdit.Text.Trim()), 6, "Consumption Sheets");
            }
        }
        private void clear()
        {
            ArticleIDTextEdit.Text = "";
            NameTextEdit.Text = "";
            StyleNumberTextEdit.Text = "";
            BrandTextEdit.Text = "";
            GenderTextEdit.Text = "";
            ColorTextEdit.Text = "";
            CurrencyTextEdit.Text = "";
            CompTextEdit.Text = "";
            PriceByTextEdit.Text = "";
            PriceTextEdit.Text = "";
            WeightTextEdit.Text = "";
            ClearALLGrids();
            pictureEdit1.Image = null;
        }
        private void gridView2_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            FolderPath = @"\\Acc-stock\jtex\PO Files Data\Barcode Sheets";
            try
            {
                FileName = gridView2.GetFocusedRowCellValue("FileName").ToString();

            }
            catch (Exception ex)
            {
                MessageBox.Show("" + ex.Message);
            }


        }
        private void bbiRefresh_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            clear();
            
        }

        #region OpenExcel

        private void gridView2_DoubleClick(object sender, EventArgs e)
        {
            //Double Click to open ExcelFile From DestinationFile
            //MessageBox.Show("Test");

            //System.Diagnostics.Process.Start(@"C:\Users\fahid\OneDrive\Desktop\Desktop\invoice.xls");

        }

        private void gridControl2_DoubleClick(object sender, EventArgs e)
        {
            try
            {
                FolderPath = gridView2.GetFocusedRowCellValue("DestinationPath").ToString().Trim();

                System.Diagnostics.Process.Start(FolderPath);
            }
            catch (Exception ex)
            {
                MessageBox.Show("" + ex.Message);
            }
        }

        private void gridControl3_DoubleClick(object sender, EventArgs e)
        {
            try
            {
                FolderPath = gridView3.GetFocusedRowCellValue("DestinationPath").ToString().Trim();
                System.Diagnostics.Process.Start(FolderPath);
            }
            catch (Exception ex)
            {
                MessageBox.Show("" + ex.Message);
            }
        }

        private void gridControl4_DoubleClick(object sender, EventArgs e)
        {
            try
            {
                FolderPath = gridView4.GetFocusedRowCellValue("DestinationPath").ToString().Trim();
                System.Diagnostics.Process.Start(FolderPath);
            }
            catch (Exception ex)
            {
                MessageBox.Show("" + ex.Message);
            }
        }

        private void gridControl5_DoubleClick(object sender, EventArgs e)
        {
            try
            {
                FolderPath = gridView5.GetFocusedRowCellValue("DestinationPath").ToString().Trim();
                System.Diagnostics.Process.Start(FolderPath);
            }
            catch (Exception ex)
            {
                MessageBox.Show("" + ex.Message);
            }
        }

        private void gridControl6_DoubleClick(object sender, EventArgs e)
        {
            try
            {
                FolderPath = gridView6.GetFocusedRowCellValue("DestinationPath").ToString().Trim();
                System.Diagnostics.Process.Start(FolderPath);
            }
            catch (Exception ex)
            {
                MessageBox.Show("" + ex.Message);
            }
        }

        #endregion
        #region Deletion
        private void gridControl1_KeyDown(object sender, KeyEventArgs e)
        {
            // Article Barcode Deletion
            if (e.KeyCode == Keys.Delete)
            {
                DeleteArticleBarcode(Convert.ToInt32(ArticleIDTextEdit.Text),
                    Convert.ToByte(gridView1.GetFocusedRowCellValue("sizeid").ToString()),
                    Convert.ToInt16(gridView1.GetFocusedRowCellValue("qty").ToString()),
                    gridView1.GetFocusedRowCellValue("barcode").ToString().Trim());

            }
        }

        private void DeleteFileBtn_Click(object sender, EventArgs e)
        {
            DeleteFile(Convert.ToInt64(gridView2.GetFocusedRowCellValue("id").ToString()));
        }

        private void DeleteBarcodeFileBtn_Click(object sender, EventArgs e)
        {
            DeleteFile(Convert.ToInt64(gridView3.GetFocusedRowCellValue("id").ToString()));
        }

        private void DeleteCommentSheetFileBtn_Click(object sender, EventArgs e)
        {
            DeleteFile(Convert.ToInt64(gridView4.GetFocusedRowCellValue("id").ToString()));
        }

        private void DeleteSCSBtn_Click(object sender, EventArgs e)
        {
            DeleteFile(Convert.ToInt64(gridView5.GetFocusedRowCellValue("id").ToString()));
        }

        private void DeleteConsumptionSheetBtn_Click(object sender, EventArgs e)
        {
            DeleteFile(Convert.ToInt64(gridView6.GetFocusedRowCellValue("id").ToString()));
        }
        #endregion
        #region save
        private void SaveBtn_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if(CheckExistMethod(StyleNumberTextEdit.Text.Trim()))
                {
                ArticleIDTextEdit.Text = GetMaxOne().ToString().Trim();
                //Save Articles Data
                if (CreateArticle())
                {
                    SaveImageInNetwork();
                    SaveArticleBarcode();
                    ArticleIDTextEdit.Text = GetMaxOne().ToString().Trim();
                    clear();
                }
                else
                {
                    MessageBox.Show("Not return True");
                }
            }
            else
            {
                MessageBox.Show("Can'not enter data because same style# exist");
            }
        }
        private void AddFileBtn_Click(object sender, EventArgs e)
        {
            try           
            {
                //if(ArticleMaxOne==0)
                //{
                //    Articlemax
                //}
                DestinationPath = @"\\Acc-stock\jtex\PO Files Data\Design Sheets\"+FileName;
                SaveFile(Convert.ToInt32(ArticleIDTextEdit.Text.Trim()),
                    FileName,
                    FolderPath,
                    DestinationPath, "Design Sheets",2);
                System.IO.File.Copy(FolderPath, System.IO.Path.Combine(@"\\Acc-stock\jtex\PO Files Data\Design Sheets\", FileName));

            }
            catch(Exception ex)
            {
                //MessageBox.Show("Already File Exist....");
            }
        }
        private void AddBarcodeFileBtn_Click(object sender, EventArgs e)
        {
            try
            {

                DestinationPath = @"\\Acc-stock\jtex\PO Files Data\Barcode Sheets\"+FileName;
                SaveFile(Convert.ToInt32(ArticleIDTextEdit.Text.Trim()),
                    FileName,
                    FolderPath,
                    DestinationPath, "Barcode Sheets",3);
                System.IO.File.Copy(FolderPath, System.IO.Path.Combine(@"\\Acc-stock\jtex\PO Files Data\Barcode Sheets\", FileName));

            }
            catch (Exception ex)
            {
                //MessageBox.Show("Already File Exist....");
            }
        }
        private void AddCommentSheetBtn_Click(object sender, EventArgs e)
        {
            try
            {
                DestinationPath = @"\\Acc-stock\jtex\PO Files Data\Comments Sheets\"+FileName;
                SaveFile(Convert.ToInt32(ArticleIDTextEdit.Text.Trim()),
                    FileName,
                    FolderPath,
                    DestinationPath, "Comments Sheets",4);
                System.IO.File.Copy(FolderPath, System.IO.Path.Combine(@"\\Acc-stock\jtex\PO Files Data\Comments Sheets\", FileName));
            
            }
            catch(Exception ex)
            {
                //MessageBox.Show("Already File Exist....");
            }
    }
        private void AddSizeChartBtn_Click(object sender, EventArgs e)
        {
            try
            {
                DestinationPath = @"\\Acc-stock\jtex\PO Files Data\Size Chart Sheet\"+FileName;
                SaveFile(Convert.ToInt32(ArticleIDTextEdit.Text.Trim()),
                    FileName,
                    FolderPath,
                    DestinationPath, "Size Chart Sheets",5);
                System.IO.File.Copy(FolderPath, System.IO.Path.Combine(@"\\Acc-stock\jtex\PO Files Data\Size Chart Sheet\", FileName));
            }
            catch(Exception ex)
            {
                //MessageBox.Show("Already File Exist....");
            }
            
        }
        private void simpleButton14_Click(object sender, EventArgs e)
        {
            //Add Consumption Sheet
            try
            {
                DestinationPath = @"\\Acc-stock\jtex\PO Files Data\Consumption Sheet\"+FileName;
                SaveFile(Convert.ToInt32(ArticleIDTextEdit.Text.Trim()),
                    FileName,
                    FolderPath,
                    DestinationPath, "Consumption Sheets",6);
                System.IO.File.Copy(FolderPath, System.IO.Path.Combine(@"\\Acc-stock\jtex\PO Files Data\Consumption Sheet\", FileName));
            }
            catch (Exception ex)
            {
                //MessageBox.Show("Already File Exist....");
            }
        }
        #endregion
        #region Browse
        private void BrowseBTN_Click(object sender, EventArgs e)
        {
            DesignSheetLabel.Text = BrowseFile();
            
        }
        private void BrowsBarcodeBtn_Click(object sender, EventArgs e)
        {
            BarcodePoLabel.Text = BrowseFile();

        }
        private void BrowsConsumptionBtn_Click(object sender, EventArgs e)
        {            //Comment Sheet
            CommentSheetLabel.Text= BrowseFile();
        }
        private void BrowseSCSBtb_Click(object sender, EventArgs e)
        {
            SCSLabel.Text = BrowseFile();
        }
        private void BrowseConsumptionBtn_Click(object sender, EventArgs e)
        {
            ComnsuptionSheetLabel.Text=BrowseFile();
        }

        #endregion
        #region RefreshLookUp
        private void RefreshBrandBtn_Click(object sender, EventArgs e)
        {
            //Brand Refresh
            Brands();
        }

        private void RefreshGender_Click(object sender, EventArgs e)
        {
            Gender();
        }

        private void RefreshColor_Click(object sender, EventArgs e)
        {
            Color();
        }

        private void RefreshCurrency_Click(object sender, EventArgs e)
        {
            Currency();
        }
        #endregion

        private void UploadPhotoBtn_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog1 = new OpenFileDialog
            {
                Title = "Browse Images",
                Filter = "All files|*.*|PNG files|*.png|JPEG files|*.jpg|GIF files|*.gif|TIFF files|*.tif|Image files|*.bmp;*.jpg;*.gif;*.png;*.tif"
            };
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                FolderPath = openFileDialog1.FileName.ToString().Trim();
                
                FileName = Path.GetFileName(openFileDialog1.FileName.ToString().Trim());
                pictureEdit1.Image = Image.FromFile(openFileDialog1.FileName);
                PicturePathTextEdit.Text = FolderPath.Trim();
            }
        }
        #region Create
        BrandForm bf;
        private void CreateNewbrandBtn_Click(object sender, EventArgs e)
        {
            if (bf == null)
            {
                bf = new BrandForm();
                bf.Show();
                bf.BringToFront();
                bf.FormClosed += Bf_FormClosed;
            }
            else if (bf != null)
            {
                bf.BringToFront();
            }
            else
            {
                bf.Activate();
            }
        }

        private void Bf_FormClosed(object sender, FormClosedEventArgs e)
        {
            bf = null;
        }
        GenderForm gf;
        private void CreateGenderBtn_Click(object sender, EventArgs e)
        {
            if (gf == null)
            {
                gf = new GenderForm();
                gf.Show();
                gf.BringToFront();
                gf.FormClosed += Gf_FormClosed;
            }
            else if (gf != null)
            {
                gf.BringToFront();
            }
            else
            {
                gf.Activate();
            }
        }

        private void Gf_FormClosed(object sender, FormClosedEventArgs e)
        {
            gf = null;
        }
        ColorsForm cf;

        private void CreateColorBtn_Click(object sender, EventArgs e)
        {
            if (cf == null)
            {
                cf = new ColorsForm();
                cf.Show();
                cf.BringToFront();
                cf.FormClosed += Cf_FormClosed;
            }
            else if (cf != null)
            {
                cf.BringToFront();
            }
            else
            {
                cf.Activate();
            }
        }

        private void Cf_FormClosed(object sender, FormClosedEventArgs e)
        {
            cf = null;
        }
        CurrencyForm curF;
        private void CreateCurrencyBtn_Click(object sender, EventArgs e)
        {
            if (curF == null)
            {
                curF = new CurrencyForm(); ;
                curF.Show();
                curF.BringToFront();
                curF.FormClosed += CurF_FormClosed;
            }
            else if (curF != null)
            {
                curF.BringToFront();
            }
            else
            {
                curF.Activate();
            }
        }

        private void CurF_FormClosed(object sender, FormClosedEventArgs e)
        {
            curF = null;
        }


        #endregion

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            ArticleIDTextEdit.Text = GetMaxOne().ToString().Trim();
        }

        private void tableLayoutPanel3_Paint(object sender, PaintEventArgs e)
        {

        }

        private void EditBtn_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            //Update
            if (UpdateArticle())
            {
                SaveImageInNetwork();
            }
        }
    }
}
