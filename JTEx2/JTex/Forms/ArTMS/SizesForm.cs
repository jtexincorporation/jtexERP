using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using Modelx;

namespace JTex.Forms.ArTMS
{
    public partial class SizesForm : Form
    {
        public SizesForm()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            Modelx.ATMSEntityModel dbContext = new Modelx.ATMSEntityModel();
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.Sizes.Load();
            // This line of code is generated by Data Source Configuration Wizard
            sizesBindingSource.DataSource = dbContext.Sizes.Local.ToBindingList();
        }
        ATMSEntityModel atmObj = new ATMSEntityModel();
        Modelx.Size sObj = new Modelx.Size();

        private void popGrid()
        {
            atmObj = new ATMSEntityModel();
            atmObj.Sizes.Load();
            gridControl1.DataSource = atmObj.Sizes.Local;
        }
        private void barButtonItem1_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            this.Close();
        }

        private void bbiPrintPreview_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            gridControl1.ShowRibbonPrintPreview();
        }

        private void bbiNew_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            sObj.Name = NameTextEdit.Text.Trim();
            sObj.Description = DescriptionTextEdit.Text.Trim();
            sObj.isActive = isActiveCheckEdit.Checked;

            using (var myDbEntities = new ATMSEntityModel())
            {
                myDbEntities.Sizes.Add(sObj);
                myDbEntities.SaveChanges();
            }
            popGrid();
        }

        private void bbiEdit_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (SizeIDTextEdit.Text != "")
            {
                sObj.SizeID = Convert.ToByte(SizeIDTextEdit.Text.Trim());
                sObj.Name = NameTextEdit.Text.Trim();
                sObj.Description = DescriptionTextEdit.Text.Trim();
                sObj.isActive = isActiveCheckEdit.Checked;

                using (var myDbEntities = new ATMSEntityModel())
                {
                    myDbEntities.Entry(sObj).State = EntityState.Modified;
                    myDbEntities.SaveChanges();
                }
                popGrid();
            }
            else
            {
                MessageBox.Show("Please insert season id....");
            }
        }

        private void bbiDelete_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (SizeIDTextEdit.Text != "")
            {
                sObj.SizeID = Convert.ToByte(SizeIDTextEdit.Text.Trim());
                using (var myDbEntities = new ATMSEntityModel())
                {
                    myDbEntities.Entry(sObj).State = EntityState.Deleted;
                    myDbEntities.SaveChanges();
                }
                popGrid();
            }
            else
            {
                MessageBox.Show("Please insert season id....");
            }
        }

        private void gridView1_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            try
            {
                SizeIDTextEdit.Text = gridView1.GetFocusedRowCellValue("SizeID").ToString().Trim();
                NameTextEdit.Text = gridView1.GetFocusedRowCellValue("Name").ToString().Trim();
                DescriptionTextEdit.Text = gridView1.GetFocusedRowCellValue("Description").ToString().Trim();
                isActiveCheckEdit.Checked = Convert.ToBoolean(gridView1.GetFocusedRowCellValue("isActive"));
            }
            catch (Exception ex)
            {

            }
        }
    }
}
